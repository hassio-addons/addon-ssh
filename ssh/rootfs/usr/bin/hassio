#!/bin/bash
set -e

# helppage
if [ "$1" == "help" ] || [ "$#" -lt 2 ]; then
    cat << EOF
---- Hass.IO Cli ----

HomeAssistant:
  $ hassio homeassistant check
  $ hassio homeassistant info
  $ hassio homeassistant logs
  $ hassio homeassistant restart
  $ hassio homeassistant start
  $ hassio homeassistant stop
  $ hassio homeassistant update
  $ hassio homeassistant downgrade

Host:
  $ hassio host hardware
  $ hassio host reboot
  $ hassio host shutdown
  $ hassio host update

Supervisor
  $ hassio supervisor info
  $ hassio supervisor logs
  $ hassio supervisor reload
  $ hassio supervisor update
EOF
fi

function call_api() {
    get_cmd=('info' 'logs' 'hardware')

    command='POST'                           
    if [[ ${get_cmd[*]} =~ $2 ]]; then       
        command='GET'                        
    fi                                       
                                      
    api_ret=""                        
    if [ "$2" == "downgrade" ]; then  
        cver_tmp="$(curl -s -X GET "http://hassio/homeassistant/info")"
        cver=$(echo "${cver_tmp}" | jq --raw-output '.data.version')   
        read -r -e -p "Current verison is '${cver}', What version do you wish do downgrade to: " NEWVER
        read -r -e -p "Downgrade from '${cver}' -> '${NEWVER}'? [y/N]: " CONFIRM                         
        if [ "${CONFIRM}" == "y" ]; then                                                            
            echo "Downgrading... DO NOT INTERRUPT!!!"                                               
            api_ret="$(curl -sS -d '{"version": "'"${NEWVER}"'"}' http://hassio/homeassistant/update)"    
            ret_code=$?                                                                             
        else                                                                                        
            echo "Aborted"                                                                          
            return 0                                                                                
        fi                                                                                          
    else                                                                                            
        api_ret="$(curl -sS -X $command "http://hassio/$1/$2")"                                      
        ret_code=$?                                                                                 
    fi                                                                                              
                                                                                                    
    if (( ret_code != 0 )); then                                                                      
        echo "API error (${ret_code}): $api_ret"                                                    
        return 1                                                                                    
    fi                                                                                              

    if [ "$2" == "logs" ]; then
        echo "$api_ret"
        return 0
    fi
    
    result="$(echo "$api_ret" | jq --raw-output ".result")"

    # On error
    if [ "$result" == "error" ]; then
        message="$(echo "$api_ret" | jq --raw-output ".message // empty")"
        echo "Error on $1/$2:" "$message"
        return 1
    fi

    # On success
    data="$(echo "$api_ret" | jq 'if .data == {} then empty else .data end')"
    if [ ! -z "$data" ]; then
        echo "$data" | jq .
    else
        echo "Success $1/$2"
    fi

    return 0
}

######
# homeassistant functions
if [ "$1" == "homeassistant" ]; then
    hass_cmd=('logs' 'restart' 'update' 'check' 'start' 'stop' 'info' 'downgrade')
    if [[ ! ${hass_cmd[*]} =~ $2 ]]; then
        echo "No homeassistant command '$2' found!"
        exit 1
    fi

    call_api "$1" "$2"
fi

######
# host functions
if [ "$1" == "host" ]; then
    hass_cmd=('reboot' 'shutdown' 'update' 'hardware')
    if [[ ! ${hass_cmd[*]} =~ $2 ]]; then
        echo "No host command '$2' found!"
        exit 1
    fi

    call_api "$1" "$2"
fi

######
# supervisor functions
if [ "$1" == "supervisor" ]; then
    hass_cmd=('logs' 'reload' 'update' 'info')
    if [[ ! ${hass_cmd[*]} =~ $2 ]]; then
        echo "No supervisor command '$2' found!"
        exit 1
    fi

    call_api "$1" "$2"
fi
